// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: school.proto

package unicampus_school

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type School struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *School) Reset()         { *m = School{} }
func (m *School) String() string { return proto.CompactTextString(m) }
func (*School) ProtoMessage()    {}
func (*School) Descriptor() ([]byte, []int) {
	return fileDescriptor_school_89b45589da2075a6, []int{0}
}
func (m *School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_School.Merge(dst, src)
}
func (m *School) XXX_Size() int {
	return m.Size()
}
func (m *School) XXX_DiscardUnknown() {
	xxx_messageInfo_School.DiscardUnknown(m)
}

var xxx_messageInfo_School proto.InternalMessageInfo

func (m *School) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *School) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *School) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Query struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_school_89b45589da2075a6, []int{1}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Critera struct {
	Sector               string   `protobuf:"bytes,1,opt,name=sector,proto3" json:"sector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Critera) Reset()         { *m = Critera{} }
func (m *Critera) String() string { return proto.CompactTextString(m) }
func (*Critera) ProtoMessage()    {}
func (*Critera) Descriptor() ([]byte, []int) {
	return fileDescriptor_school_89b45589da2075a6, []int{2}
}
func (m *Critera) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Critera) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Critera.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Critera) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Critera.Merge(dst, src)
}
func (m *Critera) XXX_Size() int {
	return m.Size()
}
func (m *Critera) XXX_DiscardUnknown() {
	xxx_messageInfo_Critera.DiscardUnknown(m)
}

var xxx_messageInfo_Critera proto.InternalMessageInfo

func (m *Critera) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

type Offset struct {
	First                uint64   `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Offset) Reset()         { *m = Offset{} }
func (m *Offset) String() string { return proto.CompactTextString(m) }
func (*Offset) ProtoMessage()    {}
func (*Offset) Descriptor() ([]byte, []int) {
	return fileDescriptor_school_89b45589da2075a6, []int{3}
}
func (m *Offset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Offset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Offset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Offset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offset.Merge(dst, src)
}
func (m *Offset) XXX_Size() int {
	return m.Size()
}
func (m *Offset) XXX_DiscardUnknown() {
	xxx_messageInfo_Offset.DiscardUnknown(m)
}

var xxx_messageInfo_Offset proto.InternalMessageInfo

func (m *Offset) GetFirst() uint64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Offset) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*School)(nil), "unicampus_school.School")
	proto.RegisterType((*Query)(nil), "unicampus_school.Query")
	proto.RegisterType((*Critera)(nil), "unicampus_school.Critera")
	proto.RegisterType((*Offset)(nil), "unicampus_school.Offset")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchoolServiceClient interface {
	ListSchool(ctx context.Context, opts ...grpc.CallOption) (SchoolService_ListSchoolClient, error)
	ListSchoolByQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (SchoolService_ListSchoolByQueryClient, error)
	ListSchoolByCritera(ctx context.Context, in *Critera, opts ...grpc.CallOption) (SchoolService_ListSchoolByCriteraClient, error)
	ListSchoolByOffset(ctx context.Context, in *Offset, opts ...grpc.CallOption) (SchoolService_ListSchoolByOffsetClient, error)
	GetSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	PutSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	DeleteSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
}

type schoolServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchoolServiceClient(cc *grpc.ClientConn) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) ListSchool(ctx context.Context, opts ...grpc.CallOption) (SchoolService_ListSchoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SchoolService_serviceDesc.Streams[0], "/unicampus_school.SchoolService/ListSchool", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolServiceListSchoolClient{stream}
	return x, nil
}

type SchoolService_ListSchoolClient interface {
	Send(*School) error
	Recv() (*School, error)
	grpc.ClientStream
}

type schoolServiceListSchoolClient struct {
	grpc.ClientStream
}

func (x *schoolServiceListSchoolClient) Send(m *School) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schoolServiceListSchoolClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolServiceClient) ListSchoolByQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (SchoolService_ListSchoolByQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SchoolService_serviceDesc.Streams[1], "/unicampus_school.SchoolService/ListSchoolByQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolServiceListSchoolByQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolService_ListSchoolByQueryClient interface {
	Recv() (*School, error)
	grpc.ClientStream
}

type schoolServiceListSchoolByQueryClient struct {
	grpc.ClientStream
}

func (x *schoolServiceListSchoolByQueryClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolServiceClient) ListSchoolByCritera(ctx context.Context, in *Critera, opts ...grpc.CallOption) (SchoolService_ListSchoolByCriteraClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SchoolService_serviceDesc.Streams[2], "/unicampus_school.SchoolService/ListSchoolByCritera", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolServiceListSchoolByCriteraClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolService_ListSchoolByCriteraClient interface {
	Recv() (*School, error)
	grpc.ClientStream
}

type schoolServiceListSchoolByCriteraClient struct {
	grpc.ClientStream
}

func (x *schoolServiceListSchoolByCriteraClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolServiceClient) ListSchoolByOffset(ctx context.Context, in *Offset, opts ...grpc.CallOption) (SchoolService_ListSchoolByOffsetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SchoolService_serviceDesc.Streams[3], "/unicampus_school.SchoolService/ListSchoolByOffset", opts...)
	if err != nil {
		return nil, err
	}
	x := &schoolServiceListSchoolByOffsetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SchoolService_ListSchoolByOffsetClient interface {
	Recv() (*School, error)
	grpc.ClientStream
}

type schoolServiceListSchoolByOffsetClient struct {
	grpc.ClientStream
}

func (x *schoolServiceListSchoolByOffsetClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schoolServiceClient) GetSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus_school.SchoolService/GetSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) PutSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus_school.SchoolService/PutSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) DeleteSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus_school.SchoolService/DeleteSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
type SchoolServiceServer interface {
	ListSchool(SchoolService_ListSchoolServer) error
	ListSchoolByQuery(*Query, SchoolService_ListSchoolByQueryServer) error
	ListSchoolByCritera(*Critera, SchoolService_ListSchoolByCriteraServer) error
	ListSchoolByOffset(*Offset, SchoolService_ListSchoolByOffsetServer) error
	GetSchool(context.Context, *School) (*School, error)
	PutSchool(context.Context, *School) (*School, error)
	DeleteSchool(context.Context, *School) (*School, error)
}

func RegisterSchoolServiceServer(s *grpc.Server, srv SchoolServiceServer) {
	s.RegisterService(&_SchoolService_serviceDesc, srv)
}

func _SchoolService_ListSchool_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchoolServiceServer).ListSchool(&schoolServiceListSchoolServer{stream})
}

type SchoolService_ListSchoolServer interface {
	Send(*School) error
	Recv() (*School, error)
	grpc.ServerStream
}

type schoolServiceListSchoolServer struct {
	grpc.ServerStream
}

func (x *schoolServiceListSchoolServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schoolServiceListSchoolServer) Recv() (*School, error) {
	m := new(School)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SchoolService_ListSchoolByQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolServiceServer).ListSchoolByQuery(m, &schoolServiceListSchoolByQueryServer{stream})
}

type SchoolService_ListSchoolByQueryServer interface {
	Send(*School) error
	grpc.ServerStream
}

type schoolServiceListSchoolByQueryServer struct {
	grpc.ServerStream
}

func (x *schoolServiceListSchoolByQueryServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolService_ListSchoolByCritera_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Critera)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolServiceServer).ListSchoolByCritera(m, &schoolServiceListSchoolByCriteraServer{stream})
}

type SchoolService_ListSchoolByCriteraServer interface {
	Send(*School) error
	grpc.ServerStream
}

type schoolServiceListSchoolByCriteraServer struct {
	grpc.ServerStream
}

func (x *schoolServiceListSchoolByCriteraServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolService_ListSchoolByOffset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Offset)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchoolServiceServer).ListSchoolByOffset(m, &schoolServiceListSchoolByOffsetServer{stream})
}

type SchoolService_ListSchoolByOffsetServer interface {
	Send(*School) error
	grpc.ServerStream
}

type schoolServiceListSchoolByOffsetServer struct {
	grpc.ServerStream
}

func (x *schoolServiceListSchoolByOffsetServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func _SchoolService_GetSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).GetSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus_school.SchoolService/GetSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).GetSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_PutSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).PutSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus_school.SchoolService/PutSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).PutSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_DeleteSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).DeleteSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus_school.SchoolService/DeleteSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).DeleteSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchoolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unicampus_school.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchool",
			Handler:    _SchoolService_GetSchool_Handler,
		},
		{
			MethodName: "PutSchool",
			Handler:    _SchoolService_PutSchool_Handler,
		},
		{
			MethodName: "DeleteSchool",
			Handler:    _SchoolService_DeleteSchool_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSchool",
			Handler:       _SchoolService_ListSchool_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListSchoolByQuery",
			Handler:       _SchoolService_ListSchoolByQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSchoolByCritera",
			Handler:       _SchoolService_ListSchoolByCritera_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSchoolByOffset",
			Handler:       _SchoolService_ListSchoolByOffset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "school.proto",
}

func (m *School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *School) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Critera) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Critera) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sector) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSchool(dAtA, i, uint64(len(m.Sector)))
		i += copy(dAtA[i:], m.Sector)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Offset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Offset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.First != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSchool(dAtA, i, uint64(m.First))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSchool(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSchool(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Critera) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sector)
	if l > 0 {
		n += 1 + l + sovSchool(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Offset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovSchool(uint64(m.First))
	}
	if m.Offset != 0 {
		n += 1 + sovSchool(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSchool(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSchool(x uint64) (n int) {
	return sovSchool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Critera) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Critera: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Critera: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchool
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Offset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Offset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Offset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSchool
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSchool
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSchool(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSchool = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchool   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("school.proto", fileDescriptor_school_89b45589da2075a6) }

var fileDescriptor_school_89b45589da2075a6 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x3b, 0xfd, 0xd3, 0xfc, 0xf4, 0x5a, 0xa5, 0x8e, 0xa2, 0x51, 0x30, 0xd4, 0xac, 0xba,
	0x2a, 0x45, 0xc1, 0xbd, 0xb5, 0x28, 0x48, 0xa9, 0xda, 0x3e, 0x80, 0xd4, 0xf4, 0x06, 0x07, 0xda,
	0x4c, 0x9c, 0x99, 0x08, 0x7d, 0x08, 0xf7, 0x3e, 0x92, 0x4b, 0x1f, 0x41, 0xe2, 0x8b, 0x48, 0x66,
	0x46, 0x0c, 0x56, 0xed, 0x22, 0xbb, 0x7b, 0xee, 0x99, 0xf3, 0x91, 0x73, 0x21, 0xd0, 0x90, 0xe1,
	0x3d, 0xe7, 0xb3, 0x4e, 0x22, 0xb8, 0xe2, 0xb4, 0x99, 0xc6, 0x2c, 0x9c, 0xcc, 0x93, 0x54, 0xde,
	0x9a, 0x7d, 0x30, 0x04, 0x77, 0xac, 0x27, 0xba, 0x01, 0x55, 0x36, 0xf5, 0x48, 0x8b, 0xb4, 0xeb,
	0xa3, 0x2a, 0x9b, 0x52, 0x0a, 0x4e, 0x3c, 0x99, 0xa3, 0x57, 0xd5, 0x1b, 0x3d, 0xd3, 0x16, 0xac,
	0x4d, 0x51, 0x86, 0x82, 0x25, 0x8a, 0xf1, 0xd8, 0xfb, 0xa7, 0xad, 0xe2, 0x2a, 0x38, 0x80, 0xda,
	0x4d, 0x8a, 0x62, 0x41, 0xb7, 0xa1, 0xf6, 0x90, 0x0f, 0x96, 0x68, 0x44, 0x70, 0x08, 0xff, 0xcf,
	0x04, 0x53, 0x28, 0x26, 0x74, 0x07, 0x5c, 0x89, 0xa1, 0xe2, 0xc2, 0xbe, 0xb0, 0x2a, 0x38, 0x01,
	0xf7, 0x2a, 0x8a, 0x24, 0xaa, 0x1c, 0x11, 0x31, 0x21, 0x95, 0x7e, 0xe0, 0x8c, 0x8c, 0xc8, 0x73,
	0x5c, 0xfb, 0xfa, 0xcb, 0x9c, 0x91, 0x55, 0x47, 0x4f, 0x0e, 0xac, 0x9b, 0x2a, 0x63, 0x14, 0x8f,
	0x2c, 0x44, 0x7a, 0x0e, 0x30, 0x60, 0x52, 0xd9, 0x7e, 0x5e, 0xe7, 0x7b, 0xf9, 0x8e, 0x71, 0xf6,
	0x7f, 0x75, 0x82, 0x4a, 0x9b, 0x74, 0x09, 0xbd, 0x84, 0xcd, 0x2f, 0x4e, 0x6f, 0x61, 0xfa, 0xed,
	0x2e, 0x87, 0xb4, 0xf1, 0x17, 0xad, 0x4b, 0xe8, 0x10, 0xb6, 0x8a, 0xac, 0xcf, 0x63, 0xec, 0x2d,
	0x87, 0xac, 0xb5, 0x82, 0x37, 0x00, 0x5a, 0xe4, 0xd9, 0xcb, 0xfd, 0x90, 0x31, 0xce, 0x0a, 0xda,
	0x29, 0xd4, 0x2f, 0xb0, 0xd4, 0xc1, 0x72, 0xc4, 0x75, 0x5a, 0x0e, 0xd1, 0x87, 0x46, 0x1f, 0x67,
	0xa8, 0xb0, 0x0c, 0xa5, 0xd7, 0x7c, 0xc9, 0x7c, 0xf2, 0x9a, 0xf9, 0xe4, 0x2d, 0xf3, 0xc9, 0xf3,
	0xbb, 0x5f, 0xb9, 0x73, 0xf5, 0x4f, 0x70, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xad, 0x38,
	0xff, 0x14, 0x03, 0x00, 0x00,
}
