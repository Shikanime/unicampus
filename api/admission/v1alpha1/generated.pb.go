// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/admission/v1alpha1/generated.proto

package unicampus_api_admission_v1alpha1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Location struct {
	Address              string   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Latitude             float64  `protobuf:"fixed64,2,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,3,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{0}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Region struct {
	City                 string   `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Country              string   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Zipcode              string   `protobuf:"bytes,4,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{1}
}
func (m *Region) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Region.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(dst, src)
}
func (m *Region) XXX_Size() int {
	return m.Size()
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Region) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Region) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Region) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

type School struct {
	UUID                 string    `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Region               *Region   `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	Location             *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *School) Reset()         { *m = School{} }
func (m *School) String() string { return proto.CompactTextString(m) }
func (*School) ProtoMessage()    {}
func (*School) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{2}
}
func (m *School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_School.Merge(dst, src)
}
func (m *School) XXX_Size() int {
	return m.Size()
}
func (m *School) XXX_DiscardUnknown() {
	xxx_messageInfo_School.DiscardUnknown(m)
}

var xxx_messageInfo_School proto.InternalMessageInfo

func (m *School) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *School) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *School) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *School) GetRegion() *Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *School) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Student struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Student) Reset()         { *m = Student{} }
func (m *Student) String() string { return proto.CompactTextString(m) }
func (*Student) ProtoMessage()    {}
func (*Student) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{3}
}
func (m *Student) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Student) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Student.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Student) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Student.Merge(dst, src)
}
func (m *Student) XXX_Size() int {
	return m.Size()
}
func (m *Student) XXX_DiscardUnknown() {
	xxx_messageInfo_Student.DiscardUnknown(m)
}

var xxx_messageInfo_Student proto.InternalMessageInfo

func (m *Student) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Student) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Student) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Student) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Application struct {
	UUID                 string   `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	School               *School  `protobuf:"bytes,2,opt,name=school,proto3" json:"school,omitempty"`
	Student              *Student `protobuf:"bytes,3,opt,name=student,proto3" json:"student,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Application) Reset()         { *m = Application{} }
func (m *Application) String() string { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()    {}
func (*Application) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{4}
}
func (m *Application) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Application) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Application.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Application) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Application.Merge(dst, src)
}
func (m *Application) XXX_Size() int {
	return m.Size()
}
func (m *Application) XXX_DiscardUnknown() {
	xxx_messageInfo_Application.DiscardUnknown(m)
}

var xxx_messageInfo_Application proto.InternalMessageInfo

func (m *Application) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Application) GetSchool() *School {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *Application) GetStudent() *Student {
	if m != nil {
		return m.Student
	}
	return nil
}

type Query struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{5}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Critera struct {
	Sector               string   `protobuf:"bytes,1,opt,name=sector,proto3" json:"sector,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Critera) Reset()         { *m = Critera{} }
func (m *Critera) String() string { return proto.CompactTextString(m) }
func (*Critera) ProtoMessage()    {}
func (*Critera) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{6}
}
func (m *Critera) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Critera) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Critera.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Critera) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Critera.Merge(dst, src)
}
func (m *Critera) XXX_Size() int {
	return m.Size()
}
func (m *Critera) XXX_DiscardUnknown() {
	xxx_messageInfo_Critera.DiscardUnknown(m)
}

var xxx_messageInfo_Critera proto.InternalMessageInfo

func (m *Critera) GetSector() string {
	if m != nil {
		return m.Sector
	}
	return ""
}

type Offset struct {
	First                uint64   `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Offset) Reset()         { *m = Offset{} }
func (m *Offset) String() string { return proto.CompactTextString(m) }
func (*Offset) ProtoMessage()    {}
func (*Offset) Descriptor() ([]byte, []int) {
	return fileDescriptor_generated_b44b0105082de8fc, []int{7}
}
func (m *Offset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Offset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Offset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Offset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offset.Merge(dst, src)
}
func (m *Offset) XXX_Size() int {
	return m.Size()
}
func (m *Offset) XXX_DiscardUnknown() {
	xxx_messageInfo_Offset.DiscardUnknown(m)
}

var xxx_messageInfo_Offset proto.InternalMessageInfo

func (m *Offset) GetFirst() uint64 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *Offset) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterType((*Location)(nil), "unicampus.api.admission.v1alpha1.Location")
	proto.RegisterType((*Region)(nil), "unicampus.api.admission.v1alpha1.Region")
	proto.RegisterType((*School)(nil), "unicampus.api.admission.v1alpha1.School")
	proto.RegisterType((*Student)(nil), "unicampus.api.admission.v1alpha1.Student")
	proto.RegisterType((*Application)(nil), "unicampus.api.admission.v1alpha1.Application")
	proto.RegisterType((*Query)(nil), "unicampus.api.admission.v1alpha1.Query")
	proto.RegisterType((*Critera)(nil), "unicampus.api.admission.v1alpha1.Critera")
	proto.RegisterType((*Offset)(nil), "unicampus.api.admission.v1alpha1.Offset")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdmissionServiceClient is the client API for AdmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdmissionServiceClient interface {
	ListSchools(ctx context.Context, opts ...grpc.CallOption) (AdmissionService_ListSchoolsClient, error)
	ListSchoolsByQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (AdmissionService_ListSchoolsByQueryClient, error)
	ListSchoolsByCritera(ctx context.Context, in *Critera, opts ...grpc.CallOption) (AdmissionService_ListSchoolsByCriteraClient, error)
	FindSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	RegisterSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	UnregisterSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	UpdateSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error)
	AppyStudentToSchool(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error)
	FindStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	RegisterStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	UnregisterStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
}

type admissionServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdmissionServiceClient(cc *grpc.ClientConn) AdmissionServiceClient {
	return &admissionServiceClient{cc}
}

func (c *admissionServiceClient) ListSchools(ctx context.Context, opts ...grpc.CallOption) (AdmissionService_ListSchoolsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdmissionService_serviceDesc.Streams[0], "/unicampus.api.admission.v1alpha1.AdmissionService/ListSchools", opts...)
	if err != nil {
		return nil, err
	}
	x := &admissionServiceListSchoolsClient{stream}
	return x, nil
}

type AdmissionService_ListSchoolsClient interface {
	Send(*School) error
	Recv() (*School, error)
	grpc.ClientStream
}

type admissionServiceListSchoolsClient struct {
	grpc.ClientStream
}

func (x *admissionServiceListSchoolsClient) Send(m *School) error {
	return x.ClientStream.SendMsg(m)
}

func (x *admissionServiceListSchoolsClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *admissionServiceClient) ListSchoolsByQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (AdmissionService_ListSchoolsByQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdmissionService_serviceDesc.Streams[1], "/unicampus.api.admission.v1alpha1.AdmissionService/ListSchoolsByQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &admissionServiceListSchoolsByQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdmissionService_ListSchoolsByQueryClient interface {
	Recv() (*School, error)
	grpc.ClientStream
}

type admissionServiceListSchoolsByQueryClient struct {
	grpc.ClientStream
}

func (x *admissionServiceListSchoolsByQueryClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *admissionServiceClient) ListSchoolsByCritera(ctx context.Context, in *Critera, opts ...grpc.CallOption) (AdmissionService_ListSchoolsByCriteraClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AdmissionService_serviceDesc.Streams[2], "/unicampus.api.admission.v1alpha1.AdmissionService/ListSchoolsByCritera", opts...)
	if err != nil {
		return nil, err
	}
	x := &admissionServiceListSchoolsByCriteraClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdmissionService_ListSchoolsByCriteraClient interface {
	Recv() (*School, error)
	grpc.ClientStream
}

type admissionServiceListSchoolsByCriteraClient struct {
	grpc.ClientStream
}

func (x *admissionServiceListSchoolsByCriteraClient) Recv() (*School, error) {
	m := new(School)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *admissionServiceClient) FindSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/FindSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) RegisterSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/RegisterSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) UnregisterSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/UnregisterSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) UpdateSchool(ctx context.Context, in *School, opts ...grpc.CallOption) (*School, error) {
	out := new(School)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/UpdateSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) AppyStudentToSchool(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/AppyStudentToSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) FindStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/FindStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) RegisterStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/RegisterStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) UnregisterStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/UnregisterStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) UpdateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/unicampus.api.admission.v1alpha1.AdmissionService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionServiceServer is the server API for AdmissionService service.
type AdmissionServiceServer interface {
	ListSchools(AdmissionService_ListSchoolsServer) error
	ListSchoolsByQuery(*Query, AdmissionService_ListSchoolsByQueryServer) error
	ListSchoolsByCritera(*Critera, AdmissionService_ListSchoolsByCriteraServer) error
	FindSchool(context.Context, *School) (*School, error)
	RegisterSchool(context.Context, *School) (*School, error)
	UnregisterSchool(context.Context, *School) (*School, error)
	UpdateSchool(context.Context, *School) (*School, error)
	AppyStudentToSchool(context.Context, *Application) (*Application, error)
	FindStudent(context.Context, *Student) (*Student, error)
	RegisterStudent(context.Context, *Student) (*Student, error)
	UnregisterStudent(context.Context, *Student) (*Student, error)
	UpdateStudent(context.Context, *Student) (*Student, error)
}

func RegisterAdmissionServiceServer(s *grpc.Server, srv AdmissionServiceServer) {
	s.RegisterService(&_AdmissionService_serviceDesc, srv)
}

func _AdmissionService_ListSchools_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AdmissionServiceServer).ListSchools(&admissionServiceListSchoolsServer{stream})
}

type AdmissionService_ListSchoolsServer interface {
	Send(*School) error
	Recv() (*School, error)
	grpc.ServerStream
}

type admissionServiceListSchoolsServer struct {
	grpc.ServerStream
}

func (x *admissionServiceListSchoolsServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func (x *admissionServiceListSchoolsServer) Recv() (*School, error) {
	m := new(School)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AdmissionService_ListSchoolsByQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdmissionServiceServer).ListSchoolsByQuery(m, &admissionServiceListSchoolsByQueryServer{stream})
}

type AdmissionService_ListSchoolsByQueryServer interface {
	Send(*School) error
	grpc.ServerStream
}

type admissionServiceListSchoolsByQueryServer struct {
	grpc.ServerStream
}

func (x *admissionServiceListSchoolsByQueryServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func _AdmissionService_ListSchoolsByCritera_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Critera)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdmissionServiceServer).ListSchoolsByCritera(m, &admissionServiceListSchoolsByCriteraServer{stream})
}

type AdmissionService_ListSchoolsByCriteraServer interface {
	Send(*School) error
	grpc.ServerStream
}

type admissionServiceListSchoolsByCriteraServer struct {
	grpc.ServerStream
}

func (x *admissionServiceListSchoolsByCriteraServer) Send(m *School) error {
	return x.ServerStream.SendMsg(m)
}

func _AdmissionService_FindSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).FindSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/FindSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).FindSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_RegisterSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).RegisterSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/RegisterSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).RegisterSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_UnregisterSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).UnregisterSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/UnregisterSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).UnregisterSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_UpdateSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(School)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).UpdateSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/UpdateSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).UpdateSchool(ctx, req.(*School))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_AppyStudentToSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).AppyStudentToSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/AppyStudentToSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).AppyStudentToSchool(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_FindStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).FindStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/FindStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).FindStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_RegisterStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).RegisterStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/RegisterStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).RegisterStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_UnregisterStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).UnregisterStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/UnregisterStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).UnregisterStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unicampus.api.admission.v1alpha1.AdmissionService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).UpdateStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdmissionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unicampus.api.admission.v1alpha1.AdmissionService",
	HandlerType: (*AdmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSchool",
			Handler:    _AdmissionService_FindSchool_Handler,
		},
		{
			MethodName: "RegisterSchool",
			Handler:    _AdmissionService_RegisterSchool_Handler,
		},
		{
			MethodName: "UnregisterSchool",
			Handler:    _AdmissionService_UnregisterSchool_Handler,
		},
		{
			MethodName: "UpdateSchool",
			Handler:    _AdmissionService_UpdateSchool_Handler,
		},
		{
			MethodName: "AppyStudentToSchool",
			Handler:    _AdmissionService_AppyStudentToSchool_Handler,
		},
		{
			MethodName: "FindStudent",
			Handler:    _AdmissionService_FindStudent_Handler,
		},
		{
			MethodName: "RegisterStudent",
			Handler:    _AdmissionService_RegisterStudent_Handler,
		},
		{
			MethodName: "UnregisterStudent",
			Handler:    _AdmissionService_UnregisterStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _AdmissionService_UpdateStudent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSchools",
			Handler:       _AdmissionService_ListSchools_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListSchoolsByQuery",
			Handler:       _AdmissionService_ListSchoolsByQuery_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSchoolsByCritera",
			Handler:       _AdmissionService_ListSchoolsByCritera_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/admission/v1alpha1/generated.proto",
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Latitude != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Latitude))))
		i += 8
	}
	if m.Longitude != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Longitude))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Region) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Region) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.City) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Zipcode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Zipcode)))
		i += copy(dAtA[i:], m.Zipcode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *School) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Region != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Region.Size()))
		n1, err := m.Region.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Location != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Location.Size()))
		n2, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Student) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Student) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Application) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Application) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UUID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	if m.School != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.School.Size()))
		n3, err := m.School.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Student != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Student.Size()))
		n4, err := m.Student.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Critera) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Critera) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sector) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.Sector)))
		i += copy(dAtA[i:], m.Sector)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Offset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Offset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.First != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.First))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Latitude != 0 {
		n += 9
	}
	if m.Longitude != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Region) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Zipcode)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Student) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Application) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Student != nil {
		l = m.Student.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Critera) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sector)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Offset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.First != 0 {
		n += 1 + sovGenerated(uint64(m.First))
	}
	if m.Offset != 0 {
		n += 1 + sovGenerated(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Latitude = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Longitude = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Region) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Region: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Region: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &Region{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Student) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Student: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Student: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Application) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Application: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Application: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Student == nil {
				m.Student = &Student{}
			}
			if err := m.Student.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Critera) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Critera: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Critera: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Offset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Offset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Offset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			m.First = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.First |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("api/admission/v1alpha1/generated.proto", fileDescriptor_generated_b44b0105082de8fc)
}

var fileDescriptor_generated_b44b0105082de8fc = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0x77, 0x6a, 0xba, 0x49, 0x5e, 0xaa, 0x6d, 0xc7, 0xa2, 0x21, 0xb6, 0x21, 0xee, 0x41, 0x63,
	0xc1, 0xa4, 0xad, 0xe0, 0xb9, 0x69, 0xa5, 0x20, 0x84, 0x8a, 0x5b, 0x73, 0x55, 0xc6, 0xdd, 0x49,
	0x3a, 0x90, 0xee, 0xac, 0x3b, 0x93, 0x68, 0x5a, 0x7a, 0xd0, 0xb3, 0x37, 0x2f, 0x7e, 0x04, 0x3f,
	0x8a, 0x47, 0xc1, 0xab, 0x07, 0xa9, 0x7e, 0x03, 0xbf, 0x80, 0xcc, 0x9f, 0x8d, 0x5b, 0x0c, 0x64,
	0xa5, 0x34, 0xb7, 0x79, 0xff, 0x7e, 0xbf, 0xf7, 0x7e, 0xfb, 0x78, 0x2c, 0xdc, 0x25, 0x11, 0x6b,
	0x92, 0xe0, 0x88, 0x09, 0xc1, 0x78, 0xd8, 0x1c, 0x6e, 0x92, 0x7e, 0x74, 0x48, 0x36, 0x9b, 0x3d,
	0x1a, 0xd2, 0x98, 0x48, 0x1a, 0x34, 0xa2, 0x98, 0x4b, 0x8e, 0x6b, 0x83, 0x90, 0xf9, 0xe4, 0x28,
	0x1a, 0x88, 0x06, 0x89, 0x58, 0x63, 0x5c, 0xd1, 0x48, 0x2a, 0x2a, 0xab, 0x3d, 0xce, 0x7b, 0x7d,
	0xda, 0xd4, 0x80, 0x61, 0xc8, 0x25, 0x91, 0x8c, 0x87, 0xc2, 0xd4, 0xbb, 0x2f, 0xa0, 0xd0, 0xe6,
	0xbe, 0x76, 0xe1, 0x32, 0xe4, 0x5b, 0x41, 0x10, 0x53, 0x21, 0xca, 0xa8, 0x86, 0xea, 0x45, 0x2f,
	0x31, 0x71, 0x05, 0x0a, 0x6d, 0x22, 0x99, 0x1c, 0x04, 0xb4, 0x3c, 0x57, 0x43, 0x75, 0xe4, 0x8d,
	0x6d, 0xbc, 0x0a, 0xc5, 0x36, 0x0f, 0x7b, 0x26, 0x78, 0x55, 0x07, 0xff, 0x3a, 0xdc, 0x2e, 0x38,
	0x1e, 0xed, 0x29, 0x74, 0x0c, 0x39, 0x9f, 0xc9, 0x91, 0x85, 0xd6, 0x6f, 0xbc, 0x02, 0xf3, 0x42,
	0x12, 0x69, 0x40, 0x8b, 0x9e, 0x31, 0x54, 0x1f, 0x3e, 0x1f, 0x84, 0x32, 0x1e, 0x69, 0xbc, 0xa2,
	0x97, 0x98, 0x2a, 0x72, 0xcc, 0x22, 0x9f, 0x07, 0xb4, 0x9c, 0x33, 0x11, 0x6b, 0xba, 0xdf, 0x11,
	0x38, 0x07, 0xfe, 0x21, 0xe7, 0x7d, 0x45, 0xd4, 0xe9, 0x3c, 0x79, 0x9c, 0x10, 0xa9, 0xb7, 0xf2,
	0x85, 0xe4, 0x28, 0xe1, 0xd1, 0x6f, 0x5c, 0x83, 0x52, 0x40, 0x85, 0x1f, 0xb3, 0x48, 0x4d, 0x6f,
	0xa9, 0xd2, 0x2e, 0xbc, 0x0d, 0x4e, 0xac, 0x9b, 0x2f, 0xcf, 0xd7, 0x50, 0xbd, 0xb4, 0x55, 0x6f,
	0x4c, 0x53, 0xbb, 0x61, 0x86, 0xf5, 0x6c, 0x1d, 0xde, 0x83, 0x42, 0xdf, 0xca, 0x5b, 0x76, 0x34,
	0xc6, 0xfa, 0x74, 0x8c, 0xe4, 0x83, 0x78, 0xe3, 0x5a, 0xf7, 0x04, 0xf2, 0x07, 0x4a, 0xcf, 0x50,
	0x4e, 0x1c, 0x6f, 0x0d, 0xa0, 0xcb, 0x62, 0x21, 0x5f, 0xa6, 0x86, 0x2c, 0x6a, 0xcf, 0xbe, 0x9a,
	0xf4, 0x36, 0x14, 0xfb, 0x24, 0x89, 0x9a, 0x39, 0x0b, 0xca, 0xb1, 0x3f, 0x41, 0x86, 0xdc, 0x3f,
	0x32, 0xb8, 0x9f, 0x11, 0x94, 0x5a, 0x51, 0xd4, 0x67, 0x76, 0x4f, 0x26, 0x75, 0xb0, 0x0d, 0x8e,
	0xd0, 0xf2, 0x6b, 0xf6, 0x4c, 0x52, 0x99, 0xcf, 0xe5, 0xd9, 0x3a, 0xbc, 0x0b, 0x79, 0x61, 0x46,
	0xd4, 0x2d, 0x96, 0xb6, 0xee, 0x67, 0x80, 0x30, 0x05, 0x5e, 0x52, 0xe9, 0xae, 0xc1, 0xfc, 0xb3,
	0x01, 0x8d, 0xf5, 0x66, 0xbd, 0x56, 0x0f, 0xdb, 0xa4, 0x31, 0xdc, 0x3b, 0x90, 0xdf, 0x8d, 0x99,
	0xa4, 0x31, 0xc1, 0x37, 0xc1, 0x11, 0xd4, 0x97, 0x3c, 0xb6, 0x19, 0xd6, 0x72, 0x1f, 0x81, 0xf3,
	0xb4, 0xdb, 0x15, 0x54, 0x2a, 0x08, 0x2d, 0xa1, 0x4e, 0xc8, 0x79, 0xc6, 0x50, 0x75, 0x5c, 0xc7,
	0xf5, 0xa0, 0x39, 0xcf, 0x5a, 0x5b, 0xbf, 0x4b, 0xb0, 0xd4, 0x4a, 0x3a, 0x3c, 0xa0, 0xf1, 0x90,
	0xf9, 0x14, 0x8f, 0xa0, 0xd4, 0x66, 0x42, 0x9a, 0x49, 0x05, 0xce, 0x2c, 0x4a, 0x25, 0x73, 0xa6,
	0x8b, 0xdf, 0x7f, 0xfb, 0xf5, 0x71, 0x6e, 0x01, 0x43, 0x73, 0xb8, 0xd9, 0x34, 0x52, 0xd6, 0xd1,
	0x06, 0xc2, 0xa7, 0x80, 0x53, 0xd4, 0x3b, 0x23, 0x23, 0xcb, 0xbd, 0xe9, 0xb8, 0x3a, 0xf1, 0x62,
	0x0d, 0x6c, 0x20, 0xfc, 0x0e, 0xc1, 0xca, 0x39, 0xfe, 0x44, 0xf7, 0x0c, 0x5f, 0xd5, 0xa6, 0x5e,
	0xb8, 0x07, 0x09, 0xb0, 0xc7, 0xc2, 0xc0, 0x9e, 0x85, 0x19, 0x89, 0x8f, 0xdf, 0xc2, 0x75, 0x75,
	0x04, 0x84, 0xa4, 0xf1, 0xe5, 0x33, 0xbb, 0x69, 0xe6, 0x63, 0x58, 0xea, 0x84, 0xf1, 0xcc, 0xb8,
	0xd7, 0xd3, 0xdc, 0x43, 0x58, 0xe8, 0x44, 0x01, 0x91, 0xf4, 0xf2, 0x79, 0x2b, 0x69, 0xde, 0x0f,
	0x08, 0x6e, 0xb4, 0xa2, 0x68, 0x64, 0x2f, 0xc1, 0x73, 0x6e, 0xf9, 0x1f, 0x4c, 0x47, 0x4d, 0x9d,
	0xb4, 0xca, 0xff, 0xa5, 0xbb, 0xb7, 0x74, 0x27, 0xcb, 0xee, 0xa2, 0xea, 0x84, 0xa4, 0x4e, 0xe3,
	0x1b, 0x28, 0xe9, 0x95, 0xb3, 0xb7, 0x3a, 0xfb, 0x09, 0xab, 0x64, 0x4f, 0x9d, 0xb8, 0x75, 0x27,
	0xb0, 0x38, 0xde, 0xba, 0x59, 0x90, 0x9f, 0x5b, 0xbc, 0x53, 0x58, 0x4e, 0x2d, 0xde, 0x2c, 0xe8,
	0xcf, 0xed, 0xde, 0x08, 0xae, 0xd9, 0xdd, 0x9b, 0x05, 0x75, 0x7a, 0xfd, 0x76, 0x96, 0xbe, 0x9c,
	0x55, 0xd1, 0xd7, 0xb3, 0x2a, 0xfa, 0x71, 0x56, 0x45, 0x9f, 0x7e, 0x56, 0xaf, 0xbc, 0x72, 0xf4,
	0x7f, 0xd5, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x87, 0x23, 0x5c, 0xc3, 0xc1, 0x09, 0x00,
	0x00,
}
